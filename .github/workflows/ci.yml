name: CI
on: [push]
jobs:
  run_tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: thousand_test
          POSTGRES_PASSWORD: vampire
          POSTGRES_USER: vampire
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@v2
        with:
          go-version: "1.16.3"

      - run: go run ./cmd migrate run
        env:
          DATABASE_URL: postgres://vampire:vampire@localhost:5432/thousand_test?sslmode=disable

      - run: go test ./...
        env:
          DATABASE_URL: postgres://vampire:vampire@localhost:5432/thousand_test?sslmode=disable
          TMPDIR: ${{ runner.temp }}

  run_linter:
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2

  analyze:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: "1.16.3"

      - uses: github/codeql-action/init@v1
        with:
          languages: go

      - uses: github/codeql-action/analyze@v1

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [run_tests, analyze]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: superfly/flyctl-actions@1.1
        with:
          args: "deploy"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
