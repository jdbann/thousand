// Code generated by sqlc. DO NOT EDIT.
// source: characters.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (vampire_id, name, type)
    VALUES ($1, $2, $3)
RETURNING
    id, vampire_id, name, type, created_at, updated_at
`

type CreateCharacterParams struct {
	VampireID uuid.UUID
	Name      string
	Type      CharacterType
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter, arg.VampireID, arg.Name, arg.Type)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.VampireID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharactersForVampire = `-- name: GetCharactersForVampire :many
SELECT
    characters.id, characters.vampire_id, characters.name, characters.type, characters.created_at, characters.updated_at
FROM
    characters
WHERE
    characters.vampire_id = $1
`

func (q *Queries) GetCharactersForVampire(ctx context.Context, vampireID uuid.UUID) ([]Character, error) {
	rows, err := q.db.Query(ctx, getCharactersForVampire, vampireID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.VampireID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
