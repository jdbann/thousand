// Code generated by sqlc. DO NOT EDIT.
// source: marks.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createMark = `-- name: CreateMark :one
INSERT INTO marks (vampire_id, description)
    VALUES ($1, $2)
RETURNING
    id, vampire_id, description, created_at, updated_at
`

type CreateMarkParams struct {
	VampireID   uuid.UUID
	Description string
}

func (q *Queries) CreateMark(ctx context.Context, arg CreateMarkParams) (Mark, error) {
	row := q.db.QueryRow(ctx, createMark, arg.VampireID, arg.Description)
	var i Mark
	err := row.Scan(
		&i.ID,
		&i.VampireID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMarksForVampire = `-- name: GetMarksForVampire :many
SELECT
    marks.id, marks.vampire_id, marks.description, marks.created_at, marks.updated_at
FROM
    marks
WHERE
    marks.vampire_id = $1
`

func (q *Queries) GetMarksForVampire(ctx context.Context, vampireID uuid.UUID) ([]Mark, error) {
	rows, err := q.db.Query(ctx, getMarksForVampire, vampireID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mark
	for rows.Next() {
		var i Mark
		if err := rows.Scan(
			&i.ID,
			&i.VampireID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
