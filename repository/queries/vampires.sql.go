// Code generated by sqlc. DO NOT EDIT.
// source: vampires.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createVampire = `-- name: CreateVampire :one
INSERT INTO vampires (name, user_id)
    VALUES ($1, $2::uuid)
RETURNING
    id, name, created_at, updated_at, user_id
`

type CreateVampireParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateVampire(ctx context.Context, arg CreateVampireParams) (Vampire, error) {
	row := q.db.QueryRow(ctx, createVampire, arg.Name, arg.UserID)
	var i Vampire
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getVampire = `-- name: GetVampire :one
SELECT
    id, name, created_at, updated_at, user_id
FROM
    vampires
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetVampire(ctx context.Context, id uuid.UUID) (Vampire, error) {
	row := q.db.QueryRow(ctx, getVampire, id)
	var i Vampire
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getVampires = `-- name: GetVampires :many
SELECT
    id, name, created_at, updated_at, user_id
FROM
    vampires
`

func (q *Queries) GetVampires(ctx context.Context) ([]Vampire, error) {
	rows, err := q.db.Query(ctx, getVampires)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vampire
	for rows.Next() {
		var i Vampire
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
