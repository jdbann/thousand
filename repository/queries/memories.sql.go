// Code generated by sqlc. DO NOT EDIT.
// source: memories.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createMemories = `-- name: CreateMemories :many
INSERT INTO memories (vampire_id)
SELECT
    unnest($1::uuid[]) AS vampire_id
RETURNING
    id, vampire_id, created_at, updated_at
`

func (q *Queries) CreateMemories(ctx context.Context, vampireID []uuid.UUID) ([]Memory, error) {
	rows, err := q.db.Query(ctx, createMemories, vampireID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memory
	for rows.Next() {
		var i Memory
		if err := rows.Scan(
			&i.ID,
			&i.VampireID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMemoriesForVampire = `-- name: GetMemoriesForVampire :many
SELECT
    id, vampire_id, created_at, updated_at
FROM
    memories
WHERE
    memories.vampire_id = $1
`

func (q *Queries) GetMemoriesForVampire(ctx context.Context, vampireID uuid.UUID) ([]Memory, error) {
	rows, err := q.db.Query(ctx, getMemoriesForVampire, vampireID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memory
	for rows.Next() {
		var i Memory
		if err := rows.Scan(
			&i.ID,
			&i.VampireID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMemory = `-- name: GetMemory :one
SELECT
    memories.id, memories.vampire_id, memories.created_at, memories.updated_at
FROM
    memories
    INNER JOIN vampires ON memories.vampire_id = vampires.id
WHERE
    vampires.id = $1
    AND memories.id = $2
`

type GetMemoryParams struct {
	VampireID uuid.UUID
	MemoryID  uuid.UUID
}

func (q *Queries) GetMemory(ctx context.Context, arg GetMemoryParams) (Memory, error) {
	row := q.db.QueryRow(ctx, getMemory, arg.VampireID, arg.MemoryID)
	var i Memory
	err := row.Scan(
		&i.ID,
		&i.VampireID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
