// Code generated by sqlc. DO NOT EDIT.
// source: experiences.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createExperience = `-- name: CreateExperience :one
INSERT INTO experiences (memory_id, description)
    VALUES ((
            SELECT
                memories.id
            FROM
                memories
            WHERE
                memories.id = $1
                AND memories.vampire_id = $2),
            $3)
RETURNING
    id, memory_id, description, created_at, updated_at
`

type CreateExperienceParams struct {
	MemoryID    uuid.UUID
	VampireID   uuid.UUID
	Description string
}

func (q *Queries) CreateExperience(ctx context.Context, arg CreateExperienceParams) (Experience, error) {
	row := q.db.QueryRow(ctx, createExperience, arg.MemoryID, arg.VampireID, arg.Description)
	var i Experience
	err := row.Scan(
		&i.ID,
		&i.MemoryID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExperiencesForVampire = `-- name: GetExperiencesForVampire :many
SELECT
    experiences.id, experiences.memory_id, experiences.description, experiences.created_at, experiences.updated_at
FROM
    experiences
    INNER JOIN memories ON experiences.memory_id = memories.id
WHERE
    memories.vampire_id = $1
`

func (q *Queries) GetExperiencesForVampire(ctx context.Context, vampireID uuid.UUID) ([]Experience, error) {
	rows, err := q.db.Query(ctx, getExperiencesForVampire, vampireID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Experience
	for rows.Next() {
		var i Experience
		if err := rows.Scan(
			&i.ID,
			&i.MemoryID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
