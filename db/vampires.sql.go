// Code generated by sqlc. DO NOT EDIT.
// source: vampires.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVampire = `-- name: CreateVampire :one
INSERT INTO vampires (name)
    VALUES ($1)
RETURNING
    id, name, created_at, updated_at
`

func (q *Queries) CreateVampire(ctx context.Context, name string) (Vampire, error) {
	row := q.db.QueryRowContext(ctx, createVampire, name)
	var i Vampire
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVampire = `-- name: GetVampire :one
SELECT
    id, name, created_at, updated_at
FROM
    vampires
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetVampire(ctx context.Context, id uuid.UUID) (Vampire, error) {
	row := q.db.QueryRowContext(ctx, getVampire, id)
	var i Vampire
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVampires = `-- name: GetVampires :many
SELECT
    id, name, created_at, updated_at
FROM
    vampires
`

func (q *Queries) GetVampires(ctx context.Context) ([]Vampire, error) {
	rows, err := q.db.QueryContext(ctx, getVampires)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vampire
	for rows.Next() {
		var i Vampire
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
